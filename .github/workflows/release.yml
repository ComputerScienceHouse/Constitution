name: Release

on:
  workflow_dispatch: ~
  push:
    branches: [ master ]

jobs:
  
  # Create a Release
  create_release:
    name: üöÄ Create Release
    runs-on: ubuntu-latest
    outputs:
      release_exists: ${{ steps.check_release.outputs.release_exists }}
      release_id: ${{ steps.check_release.outputs.release_id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      - name: Check if release exists
        id: check_release
        run: |
          release_name="${{ steps.date.outputs.date }}"
          release_data=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/${release_name}")
          if [ "$release_id" != "null" ]; then
            echo "release_exists=true" >> $GITHUB_OUTPUT
            echo "release_id=$(echo $release_data | jq -r '.id')" >> $GITHUB_OUTPUT
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: steps.check_release.outputs.release_exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.date.outputs.date }}
          release_name: Amendment ${{ steps.date.outputs.date }}
          draft: false
          prerelease: false

  upload_pdf:
    name: üöÄ Upload PDF Copy
    needs: create_release # Depends on release being created for upload URL
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install TexLive, TexLive formats-extra, Git, and Make
        run: |
          sudo apt-get update
          sudo apt-get install -y texlive texlive-formats-extra git make
      - name: üî® Build
        run: |
          make
      - name: üå•Ô∏è‚¨ÜÔ∏è Upload Assets - New Release
        if: needs.create_release.outputs.release_exists == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: Constitution.pdf
          asset_path: ./constitution.pdf
          asset_content_type: application/pdf
      - name: Upload Assets - Existing Release - Delete Existing Asset
        if: needs.create_release.outputs.release_exists == 'true'
        run: |
          asset_id=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/releases/${{ needs.create_release.outputs.release_id }}/assets | jq '.[] | select(.name == "Constitution.pdf") | .id')

          curl -L \
          -X DELETE \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id
      - name: üå•Ô∏è‚¨ÜÔ∏è Upload Assets - Existing Release
        if: needs.create_release.outputs.release_exists == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ needs.create_release.outputs.release_id }}/assets?name=Constitution.pdf"
          asset_name: Constitution.pdf
          asset_path: ./constitution.pdf
          asset_content_type: application/pdf

